[user]
  name = Baur
  email = xxx
#  signingkey = xxx

[github]
  user = capslocky

[alias]
    s = !git status -sb
    f = !git fetch origin --tags --prune && git s
    b = !git branch -lv
   br = !git branch -rv
   st = !git add -A && git s
   un = !git reset -q && git s
   m  = "!f(){ git commit -m \"$*\"; }; f"
   mj = "!f(){ git commit -m \"$(git head | cut -c9-22): $*\"; }; f"                                   # PROJECT-SPECIFIC
 head = !git rev-parse --abbrev-ref HEAD
 prev = !git rev-parse --abbrev-ref @{-1}
  rel = !git branch -l | grep release/rc-1 | tail -1 && git branch -r | grep release/rc-1 | tail -1    # PROJECT-SPECIFIC
   c  = "!f(){ git checkout -q ${1}; git s; }; f"
   co = "!f(){ git checkout --track origin/${1}; }; f"
   cb = !git checkout -b
   cr = "!f(){ git checkout $(git rel | head -1); git s; }; f"                                         # PROJECT-SPECIFIC
  crr = "!f(){ git checkout --track $(git rel | tail -1); git s; }; f"                                 # PROJECT-SPECIFIC
   cp = !git checkout -q @{-1} && git s
   cd = !git ffd && git checkout -q develop && git s
   cm = !git ffm && git checkout -q master && git s
   ct = !git checkout -B temp
   ch = !git cherry-pick
  chc = !git cherry-pick --continue
  cha = !git cherry-pick --abort
   ph = !git push -u origin HEAD
   pf = !git push --force-with-lease
   db = !git cm && git branch -d $(git prev)
  dbf = !git cm && git branch -D $(git prev)
   dr = !git push origin --delete $(git head)
   su = !git diff
   ss = !git diff --staged
   sa = !git diff HEAD
   sf = !git diff HEAD --stat
  amn = !git commit --amend --no-edit
  amm = !git commit --amend
   mu = !git merge @{u} --no-ff --no-edit
   mp = !git merge @{-1} --no-ff --no-edit
   md = !git merge origin/develop --no-edit
   mm = !git merge origin/master --no-edit
   mt = !git merge temp --no-edit
   mc = !git merge --continue
   ma = !git merge --abort
   ru = !git rebase @{u}
   rp = !git rebase @{-1}
   rd = !git rebase origin/develop
  rdt = !git rebase origin/develop -X theirs
   rc = !git rebase --continue
   ra = !git rebase --abort
   ri = !git rebase -i
   ff = !git merge @{u} --ff-only && git l1 && git s
  fff = !git f && git ff
  ffd = !git fetch . origin/develop:develop
  ffm = !git fetch . origin/master:master
 noff = !git merge --no-ff --no-edit 
 temp = !git add -A && git commit -m 'TEMP commit'
 soft = !git reset --soft HEAD~1
hardu = !git reset --hard @{u} && git l1 && git s
   me = !git config user.name && git config user.email 
   or = !git config remote.origin.url
  rem = !git remote -v
    v = !git --version
  cat = !git cat-file -p

  time = !date +"%Y-%m-%d_%H-%M-%S"


 udfh = !git reset HEAD~1 -- SQL/UDF.xml && git checkout HEAD -- SQL/UDF.xml                 # PROJECT-SPECIFIC
 udfd = !git checkout origin/develop -- SQL/UDF.xml                                          # PROJECT-SPECIFIC
 

   lp = !git log --first-parent --pretty=format:\"%h - %<(20)%an | %<(14)%ar | %s\"
   l  = !git lp -1
   l1 = !echo '\nLast 10 commits:' && git lp HEAD~10..HEAD
   l2 = !echo '\nLast 11-20 commits:' && git lp HEAD~20..HEAD~11
   l3 = !echo '\nLast 21-30 commits:' && git lp HEAD~30..HEAD~21
   l4 = !echo '\nLast 31-40 commits:' && git lp HEAD~40..HEAD~31
   l5 = !echo '\nLast 41-50 commits:' && git lp HEAD~50..HEAD~41
   lu = !git lp HEAD..@{u}
   ll = !git lp @{u}..HEAD
   lf = !git lp --follow
   la = "!f(){ git lp -20 --all --author=\"${1-Baur}\"; }; f"
   lm = "!f(){ git lp --grep \"${1-strange}\"; }; f"
   lw = "!f(){ git lp --author=\"$(git config user.name)\" --all --since='1 week ago'; }; f"

 back = "!f(){ \
name=$(git head)-backup/$(git time);\
git branch $name;\
echo $name;\
}; f" 


 copy = "!f(){ git merge $(git commit-tree ${1}^{tree} -p HEAD -m \"Tree copy from ${1}\"); }; f"

  com = "!f(){ \
left=${1:-origin/develop};\
right=${2:-$(git head)};\
read leftCount rightCount <<< $(git rev-list --left-right --count $left...$right); echo;\
echo "[$left] contains $leftCount unique commits" ;\
echo "[$right] contains $rightCount unique commits" ;\
if [[ $leftCount > 0 && $rightCount == 0 ]]; then echo "[$right] is parent for [$left]";\
elif [[ $leftCount == 0 && $rightCount > 0 ]]; then echo "[$left] is parent for [$right]";\
else echo "they dont refer one another"; fi;\
}; f"

  rvm = !sh /c/github/git-rebase-via-merge/git-rebase-via-merge.sh

debug = "!GIT_TRACE=2; GIT_CURL_VERBOSE=2; GIT_TRACE_PERFORMANCE=2; GIT_TRACE_PACK_ACCESS=2; GIT_TRACE_PACKET=2; GIT_TRACE_PACKFILE=2; GIT_TRACE_SETUP=2; GIT_TRACE_SHALLOW=2; git"

  con = !git config --edit --local
 cong = !git config --edit --global
   al = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\ \t => \\2/'

# https://stackoverflow.com/a/39616600/985457
   quote-string = "!read -r l; printf \\\"!; printf %s \"$l\" | sed 's/\\([\\\"]\\)/\\\\\\1/g'; printf \" #\\\"\\n\" #"
   quote-string-undo = "!read -r l; printf %s \"$l\" | sed 's/\\\\\\([\\\"]\\)/\\1/g'; printf \"\\n\" #"



[core]
#  editor = vim
  editor = "'C:/Program Files (x86)/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin"
  whitespace = -trailing-space,-indent-with-non-tab,-tab-in-indent
  eol = lf
  autocrlf = false
  
[credential]
  helper = manager
  modalPrompt = false

[gpg]
#  program = "C:/Program Files (x86)/GnuPG/bin/gpg.exe"

[commit]
#  gpgsign = true

[color]
  ui = auto

[gc]
  auto = 0

[pull]
  ff = only
#  rebase = true
  
[push]
  default = upstream
  followTags = true
  
[rebase]
#  autosquash = true

[merge]
# ff = 
#  tool = vimdiff
  tool = vsdiffmerge
  guitool = vsdiffmerge
  conflictstyle = diff3

[mergetool]
  prompt = true
  
[mergetool "vsdiffmerge"]
  cmd = 'C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/Common7/IDE/CommonExtensions/Microsoft/TeamFoundation/Team Explorer/vsdiffmerge.exe' $LOCAL $REMOTE $BASE $MERGED //ignorespace //m
  keepbackup = false
  trustexistcode = true

[diff]
#  tool = vimdiff
  tool = vsdiffmerge
  guitool = vsdiffmerge
  mnemonicPrefix = true
  renames = true
  
[difftool]
  prompt = true
  
[difftool "vsdiffmerge"]
  cmd = 'C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/Common7/IDE/CommonExtensions/Microsoft/TeamFoundation/Team Explorer/vsdiffmerge.exe' $LOCAL $REMOTE Source Target //ignorespace //t
  keepbackup = false
  trustexistcode = true
  
[log]
  abbrevCommit = true
  follow = true

[rerere]
  enabled = 0
  autoupdate = 1
  # to clear rr cache
  # rm -r .git/rr-cache 
  
  
  # https://git-scm.com/docs/git-config
  
  # examples
  # https://gist.github.com/tdd/470582
  # https://gist.github.com/pksunkara/988716
  # https://gist.github.com/robmiller/6018582
  
  # creating a symlink on windows (in cmd as admin)
  # rename %UserProfile%\.gitconfig .gitconfig_backup
  # mklink %UserProfile%\.gitconfig c:\github\my-git-config\.gitconfig
  
